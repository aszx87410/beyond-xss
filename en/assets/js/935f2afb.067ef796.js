"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"About This Series","href":"/beyond-xss/en/","docId":"introduction"},{"type":"category","label":"Chapter 1: Starting with XSS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Browser Security Model","href":"/beyond-xss/en/ch1/browser-security-model","docId":"ch1/browser-security-model"},{"type":"link","label":"Starting with XSS for Frontend Security","href":"/beyond-xss/en/ch1/xss-introduction","docId":"ch1/xss-introduction"},{"type":"link","label":"Understanding XSS a Bit More","href":"/beyond-xss/en/ch1/know-xss-a-bit-more","docId":"ch1/know-xss-a-bit-more"},{"type":"link","label":"Dangerous javascript: pseudo protocol","href":"/beyond-xss/en/ch1/javascript-protocol","docId":"ch1/javascript-protocol"}]},{"type":"category","label":"Chapter 2: Defense and bypass for XSS ","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The First Line of Defense Against XSS: Sanitization","href":"/beyond-xss/en/ch2/xss-defense-sanitization","docId":"ch2/xss-defense-sanitization"},{"type":"link","label":"The Second Line of Defense Against XSS: CSP","href":"/beyond-xss/en/ch2/xss-defense-csp","docId":"ch2/xss-defense-csp"},{"type":"link","label":"The Third Line of Defense against XSS: Reducing the Impact Scope","href":"/beyond-xss/en/ch2/token-storage","docId":"ch2/token-storage"},{"type":"link","label":"Latest XSS Defense: Trusted Types and Built-in Sanitizer API","href":"/beyond-xss/en/ch2/trust-types","docId":"ch2/trust-types"},{"type":"link","label":"Bypassing Your Defenses: Common CSP Bypasses","href":"/beyond-xss/en/ch2/csp-bypass","docId":"ch2/csp-bypass"},{"type":"link","label":"Bypassing Your Defense: Mutation XSS","href":"/beyond-xss/en/ch2/mutation-xss","docId":"ch2/mutation-xss"},{"type":"link","label":"The Most Powerful XSS: Universal XSS","href":"/beyond-xss/en/ch2/universal-xss","docId":"ch2/universal-xss"}]},{"type":"category","label":"Chapter 3: Attacks without JavaScript  ","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Who says you have to execute JavaScript directly to attack?","href":"/beyond-xss/en/ch3/attack-without-js","docId":"ch3/attack-without-js"},{"type":"link","label":"Prototype Pollution: Exploiting the Prototype Chain","href":"/beyond-xss/en/ch3/prototype-pollution","docId":"ch3/prototype-pollution"},{"type":"link","label":"Can HTML affect JavaScript? Introduction to DOM clobbering","href":"/beyond-xss/en/ch3/dom-clobbering","docId":"ch3/dom-clobbering"},{"type":"link","label":"Template Injection in Frontend: CSTI","href":"/beyond-xss/en/ch3/csti","docId":"ch3/csti"},{"type":"link","label":"CSS Injection: Attacking with Just CSS (Part 1)","href":"/beyond-xss/en/ch3/css-injection","docId":"ch3/css-injection"},{"type":"link","label":"CSS Injection: Attacking with Just CSS (Part 2)","href":"/beyond-xss/en/ch3/css-injection-2","docId":"ch3/css-injection-2"},{"type":"link","label":"Can You Attack with Just HTML?","href":"/beyond-xss/en/ch3/html-attack","docId":"ch3/html-attack"}]},{"type":"category","label":"Chapter 4: Cross-site attacks ","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The Essence: Same-origin Policy and Site","href":"/beyond-xss/en/ch4/sop-and-site","docId":"ch4/sop-and-site"},{"type":"link","label":"Introduction to Cross-Origin Resource Sharing (CORS)","href":"/beyond-xss/en/ch4/cors-intro","docId":"ch4/cors-intro"},{"type":"link","label":"Cross-Origin Security Issues","href":"/beyond-xss/en/ch4/cors-attack","docId":"ch4/cors-attack"},{"type":"link","label":"Cross-Site Request Forgery (CSRF) Made Easy","href":"/beyond-xss/en/ch4/csrf","docId":"ch4/csrf"},{"type":"link","label":"Same-site cookie, the savior of CSRF?","href":"/beyond-xss/en/ch4/same-site-cookie","docId":"ch4/same-site-cookie"},{"type":"link","label":"From same-site to main site","href":"/beyond-xss/en/ch4/subdomain","docId":"ch4/subdomain"},{"type":"link","label":"Interesting and Practical Cookie Bomb","href":"/beyond-xss/en/ch4/cookie-bomb","docId":"ch4/cookie-bomb"}]},{"type":"category","label":"Chapter 5: Other interesting topics  ","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What You See Is Not What You Get: Clickjacking","href":"/beyond-xss/en/ch5/clickjacking","docId":"ch5/clickjacking"},{"type":"link","label":"Exploiting MIME Sniffing","href":"/beyond-xss/en/ch5/mime-sniffing","docId":"ch5/mime-sniffing"},{"type":"link","label":"Frontend Supply Chain Attacks: Attacking Downstream from Upstream","href":"/beyond-xss/en/ch5/supply-chain-attack","docId":"ch5/supply-chain-attack"},{"type":"link","label":"Web Frontend Attacks in Web3","href":"/beyond-xss/en/ch5/web3-attacks","docId":"ch5/web3-attacks"},{"type":"link","label":"The Most Interesting Frontend Side-Channel Attack: XSLeaks (Part 1)","href":"/beyond-xss/en/ch5/xsleaks-1","docId":"ch5/xsleaks-1"},{"type":"link","label":"The Most Interesting Frontend Side Channel Attack: XSLeaks (Part 2)","href":"/beyond-xss/en/ch5/xsleaks-2","docId":"ch5/xsleaks-2"}]},{"type":"link","label":"Conclusion","href":"/beyond-xss/en/summary","docId":"summary"},{"type":"link","label":"Contact the Author","href":"/beyond-xss/en/contact","docId":"contact"}]},"docs":{"ch1/browser-security-model":{"id":"ch1/browser-security-model","title":"Browser Security Model","description":"When discussing web frontend security issues, we must first have a basic understanding of the core of web frontend.","sidebar":"tutorialSidebar"},"ch1/javascript-protocol":{"id":"ch1/javascript-protocol","title":"Dangerous javascript: pseudo protocol","description":"In the previous post, various XSS scenarios and ways to execute code were mentioned, including something called the javascript: pseudo protocol. Even from a modern frontend perspective, this is something that developers need to be particularly aware of.","sidebar":"tutorialSidebar"},"ch1/know-xss-a-bit-more":{"id":"ch1/know-xss-a-bit-more","title":"Understanding XSS a Bit More","description":"In the previous post, it was mentioned that attackers need to adjust the XSS payload to ensure effectiveness in different scenarios. For example, if the injection point is in innerHTML, using alert(1) will not have any effect. Therefore, we need to understand XSS a bit more to know what methods can be used for attacks.","sidebar":"tutorialSidebar"},"ch1/xss-introduction":{"id":"ch1/xss-introduction","title":"Starting with XSS for Frontend Security","description":"In the preface of the first article, I mentioned that frontend security is not just about XSS, there are many interesting things to explore. However, XSS itself is quite fascinating and is commonly known as \\"frontend security\\". So, let\'s start with XSS as it is an essential topic that can teach you some things you may not have noticed before.","sidebar":"tutorialSidebar"},"ch2/csp-bypass":{"id":"ch2/csp-bypass","title":"Bypassing Your Defenses: Common CSP Bypasses","description":"Previously, we discussed how developers can set up Content Security Policy (CSP) as a second line of defense for websites, preventing attackers from executing JavaScript even if they manage to inject HTML. This significantly reduces the impact of attacks. Since CSP covers a wide range of elements, including scripts, styles, and images, each website\'s CSP configuration may vary. It is important to set up CSP based on the content of your own website.","sidebar":"tutorialSidebar"},"ch2/mutation-xss":{"id":"ch2/mutation-xss","title":"Bypassing Your Defense: Mutation XSS","description":"When we talked about sanitization earlier, I reminded everyone not to attempt implementing it themselves, but to use existing libraries instead. This is because the waters are deep and there are many pitfalls.","sidebar":"tutorialSidebar"},"ch2/token-storage":{"id":"ch2/token-storage","title":"The Third Line of Defense against XSS: Reducing the Impact Scope","description":"In the first line of defense, we processed user input to ensure that it is encoded or sanitized, preventing the insertion of malicious content. The second line of defense is CSP, which prevents the execution of JavaScript and loading of external resources, even if malicious content is inserted.","sidebar":"tutorialSidebar"},"ch2/trust-types":{"id":"ch2/trust-types","title":"Latest XSS Defense: Trusted Types and Built-in Sanitizer API","description":"When discussing XSS defense, I mentioned the need to handle user input. If HTML is allowed, it is necessary to find a reliable package to handle it.","sidebar":"tutorialSidebar"},"ch2/universal-xss":{"id":"ch2/universal-xss","title":"The Most Powerful XSS: Universal XSS","description":"All the XSS vulnerabilities we mentioned earlier are mostly caused by negligence on the part of the website itself, allowing attackers to execute JavaScript code on the website.","sidebar":"tutorialSidebar"},"ch2/xss-defense-csp":{"id":"ch2/xss-defense-csp","title":"The Second Line of Defense Against XSS: CSP","description":"The first line of defense against XSS is to sanitize user input and ensure that the content is safe. However, it is easier said than done, especially for legacy projects with messy and complex code. It becomes difficult to determine where to make the necessary fixes.","sidebar":"tutorialSidebar"},"ch2/xss-defense-sanitization":{"id":"ch2/xss-defense-sanitization","title":"The First Line of Defense Against XSS: Sanitization","description":"After discussing the various basics and attack techniques of XSS, let\'s talk about defense. Starting from this post, we will officially enter Chapter 2: \\"Defense and Bypass for XSS.\\"","sidebar":"tutorialSidebar"},"ch3/attack-without-js":{"id":"ch3/attack-without-js","title":"Who says you have to execute JavaScript directly to attack?","description":"Up to this point, Chapter 2, \\"Defense and Bypass for XSS,\\" comes to a close.","sidebar":"tutorialSidebar"},"ch3/css-injection":{"id":"ch3/css-injection","title":"CSS Injection: Attacking with Just CSS (Part 1)","description":"In the previous blog posts, we have seen various attacks such as Prototype Pollution and DOM clobbering, which manipulate the execution of JavaScript to produce unexpected results. In other words, JavaScript is ultimately responsible for the impact caused by these attacks.","sidebar":"tutorialSidebar"},"ch3/css-injection-2":{"id":"ch3/css-injection-2","title":"CSS Injection: Attacking with Just CSS (Part 2)","description":"In the previous post, we learned about the basic principles of CSS data theft and demonstrated it using HackMD as a practical example, successfully stealing the CSRF token. In this post, we will delve into some details of CSS injection and address the following questions:","sidebar":"tutorialSidebar"},"ch3/csti":{"id":"ch3/csti","title":"Template Injection in Frontend: CSTI","description":"CSTI, short for Client Side Template Injection, refers to template injection in the frontend. Since there is a frontend version, there is also a corresponding backend version called SSTI, which stands for Server Side Template Injection.","sidebar":"tutorialSidebar"},"ch3/dom-clobbering":{"id":"ch3/dom-clobbering","title":"Can HTML affect JavaScript? Introduction to DOM clobbering","description":"Did you know that HTML can also affect JavaScript, in addition to vulnerabilities like prototype pollution?","sidebar":"tutorialSidebar"},"ch3/html-attack":{"id":"ch3/html-attack","title":"Can You Attack with Just HTML?","description":"Whether it\'s using HTML to affect JavaScript through DOM clobbering or attacking through prototype pollution, the goal is to disrupt existing JavaScript code to achieve an attack. Even with CSS injection, you still need the ability to add styles to carry out an attack, so it\'s not applicable in every situation.","sidebar":"tutorialSidebar"},"ch3/prototype-pollution":{"id":"ch3/prototype-pollution","title":"Prototype Pollution: Exploiting the Prototype Chain","description":"As a frontend engineer who deals with JavaScript every day, you may have heard of the prototype chain, even if you don\'t directly use it in your work.","sidebar":"tutorialSidebar"},"ch4/cookie-bomb":{"id":"ch4/cookie-bomb","title":"Interesting and Practical Cookie Bomb","description":"In the previous post, we learned about cookie tossing, which allows us to manipulate other same-site domains by writing cookies. In this post, we will introduce another attack technique that utilizes cookies called cookie bomb. It is a client-side DoS attack caused by cookies.","sidebar":"tutorialSidebar"},"ch4/cors-attack":{"id":"ch4/cors-attack","title":"Cross-Origin Security Issues","description":"While some websites use reverse proxies or other mechanisms to place the frontend and backend under the same origin, this seems to be the exception rather than the norm. In most cases, allowing frontend access to cross-origin backend APIs is almost inevitable.","sidebar":"tutorialSidebar"},"ch4/cors-intro":{"id":"ch4/cors-intro","title":"Introduction to Cross-Origin Resource Sharing (CORS)","description":"When discussing the same-origin policy, I mentioned that browsers generally prevent a website from accessing data from a different origin. However, during development, the frontend and backend may not be on the same origin. For example, one may be on huli.tw and the other on api.huli.tw. In such cases, how can the frontend access data from the backend?","sidebar":"tutorialSidebar"},"ch4/csrf":{"id":"ch4/csrf","title":"Cross-Site Request Forgery (CSRF) Made Easy","description":"Previously, we discussed CORS, which involves cross-origin data sharing and the potential for attackers to access user\'s personal or confidential data. The focus there was on \\"reading\\" data.","sidebar":"tutorialSidebar"},"ch4/same-site-cookie":{"id":"ch4/same-site-cookie","title":"Same-site cookie, the savior of CSRF?","description":"When it comes to defending against CSRF, regardless of the method used, both the frontend and backend need to implement a comprehensive mechanism to protect against it. Previously, when discussing XSS, we mentioned CSP, which can block resources that do not comply with the rules. But does the browser provide a similar way to prevent CSRF? Is there something we can add to prevent CSRF?","sidebar":"tutorialSidebar"},"ch4/sop-and-site":{"id":"ch4/sop-and-site","title":"The Essence: Same-origin Policy and Site","description":"In previous articles, we have mentioned \\"same-origin\\" several times. It is an extremely important term in both the frontend and cybersecurity worlds. The same-origin policy of browsers is crucial in development and also when dealing with attacks.","sidebar":"tutorialSidebar"},"ch4/subdomain":{"id":"ch4/subdomain","title":"From same-site to main site","description":"In the previous post about Grafana attack scenarios, it was mentioned that attackers must first gain control of a same-site website in order to execute subsequent attacks. In this post, let\'s consider a different perspective: \\"If you have control over a same-site website, what kind of attacks can you perform?\\" For example, CSRF is a possible attack method.","sidebar":"tutorialSidebar"},"ch5/clickjacking":{"id":"ch5/clickjacking","title":"What You See Is Not What You Get: Clickjacking","description":"This is the beginning of Chapter 5, \\"Other Interesting Topics\\". In this final chapter, we will explore some security topics that are more difficult to categorize and cover a wider range of content.","sidebar":"tutorialSidebar"},"ch5/mime-sniffing":{"id":"ch5/mime-sniffing","title":"Exploiting MIME Sniffing","description":"In every response, there is usually a response header called Content-Type that tells the browser the MIME type of the response, such as text/html or application/json.","sidebar":"tutorialSidebar"},"ch5/supply-chain-attack":{"id":"ch5/supply-chain-attack","title":"Frontend Supply Chain Attacks: Attacking Downstream from Upstream","description":"Supply chain attacks, target vulnerabilities in the upstream to launch attacks. Once the upstream is compromised, the downstream will also be contaminated.","sidebar":"tutorialSidebar"},"ch5/web3-attacks":{"id":"ch5/web3-attacks","title":"Web Frontend Attacks in Web3","description":"When it comes to Web3, most people think of things like cryptocurrencies, metaverses, or NFTs. These are all built on the underlying technologies of blockchain and smart contracts, which form a completely different system.","sidebar":"tutorialSidebar"},"ch5/xsleaks-1":{"id":"ch5/xsleaks-1","title":"The Most Interesting Frontend Side-Channel Attack: XSLeaks (Part 1)","description":"XSLeaks, short for Cross-site leaks, refers to the technique of using certain tricks to disclose information from other websites. Although by definition, this topic should be placed in the chapter on \\"Cross-site Attacks\\", I decided to put it at the end to give it more emphasis.","sidebar":"tutorialSidebar"},"ch5/xsleaks-2":{"id":"ch5/xsleaks-2","title":"The Most Interesting Frontend Side Channel Attack: XSLeaks (Part 2)","description":"From the last paragraph of the previous post, it can be seen that when XSLeaks is combined with search, it can create a greater impact, and this attack method is called XS-Search.","sidebar":"tutorialSidebar"},"contact":{"id":"contact","title":"Contact the Author","description":"If you find any mistakes in the book or have any topics you would like to further discuss, you can join the discussion on GitHub//github.com/aszx87410/beyond-xss/discussions","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"About This Series","description":"As a software engineer, you must be familiar with information security. In your work projects, you may have gone through security audits, including static code scanning, vulnerability scanning, or penetration testing. You may have even done more comprehensive red team exercises. Apart from that, you may have heard of OWASP and have a general idea of what OWASP Top 10 includes and what common security vulnerabilities exist.","sidebar":"tutorialSidebar"},"summary":{"id":"summary","title":"Conclusion","description":"The above is all the content of \\"Beyond XSS: Exploring the Web Front-end Security Universe\\". We started by discussing frontend security with XSS, introducing various types of XSS and attack methods. We then discussed defense techniques, including sanitization, CSP, and the latest Trusted Types and Sanitizer API.","sidebar":"tutorialSidebar"}}}')}}]);